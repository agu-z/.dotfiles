call plug#begin('~/.config/nvim/plugged')

Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'rking/ag.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'matze/vim-move'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-surround'
Plug 'kaicataldo/material.vim'
Plug 'itchyny/lightline.vim'
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'

call plug#end()


let g:material_theme_style = 'darker'

colorscheme material

if (has('termguicolors'))
  set termguicolors
endif


set nocompatible
set showcmd
set nowrap
set tabstop=2 shiftwidth=2
set expandtab
set backspace=indent,eol,start

set smartcase

set sw=2
set ts=2

set nobackup
set nowritebackup
set noswapfile

set relativenumber
set number
set clipboard=unnamed

" Leader key
let mapleader = ","
let NERDTreeShowHidden=1

" Remove trailing whitespace
autocmd BufWritePre * :%s/\s\+$//e

" NERD Mappings
map <leader>F :NERDTreeToggle<CR>
nmap <leader>n :NERDTreeFind<CR>

" Keep all multi cursors when leaving insert mode
let g:multi_cursor_exit_from_insert_mode=0

"Lightline vim
set laststatus=2
let g:lightline = { 'colorscheme': 'material_vim' }

" Move lines
let g:move_key_modifier = 'C'

" Identline settings
let g:indentLine_enabled = 0

" Add empty lines without entering normal mode
map <leader>o o<Esc>
map <leader>O O<Esc>

" Fzf mappings
map <leader><leader> :Files<CR>
map <leader>ag :Ag<CR>
map <leader>/ :Lines<CR>

" Make < > shifts keep selection
vnoremap < <gv
vnoremap > >gv

" Abbreviations
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Qall qall

" Coc TS
set updatetime=300
set shortmess+=c
set signcolumn=yes

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

