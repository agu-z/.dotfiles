" Enter the current millenium
set nocompatible

" Enable syntax
syntax enable

" Enable plugins and indent
filetype plugin indent on

" No backups
set nobackup
set nowritebackup
set noswapfile

" File jumping
set hidden 
set path+=**

" Number column
set relativenumber
set nuw=5

" Mouse (I swear I only use it to resize panes)
set mouse=a

" Project specific .vimrc
set exrc
set secure

" search
set ignorecase
set smartcase

" ---- PLUGINS ----
call plug#begin('~/.vim/plugged')


" File browser
Plug 'scrooloose/nerdtree'

" Comments
Plug 'scrooloose/nerdcommenter'

" Color scheme
Plug 'challenger-deep-theme/vim', { 'as': 'challenger-deep' }
Plug 'ghifarit53/tokyonight-vim'
Plug 'equt/paper.vim'
Plug 'kaicataldo/material.vim', { 'branch': 'main' }


" Syntax highlighting
"Plug 'sheerun/vim-polyglot'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

" Classic
Plug 'tpope/vim-surround'
Plug 'tpope/vim-rhubarb' 

" Fzf
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'

" Completion, LSP
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'antoinemadec/coc-fzf'


" Airline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Devicons
Plug 'ryanoasis/vim-devicons'



call plug#end()
" ---- PLUGINS ----


" Color scheme config

set termguicolors

let g:paper_hide_end_of_buffer=1
let g:paper_hide_statusline=1
let g:paper_hide_vert_split=1

let g:tokyonight_style = 'night' " available: night, storm
let g:tokyonight_enable_italic = 1

source ~/Code/.dotfiles/vim/theme

"colorscheme challenger_deep

"set fillchars+=vert:│
"highlight SignColumn guibg=#110f23


" Leader key
let mapleader='\'


" Config
nnoremap <Leader>v :e ~/.vimrc<cr>

" Tab size
set tabstop=2
set shiftwidth=2
set expandtab

" Do not wrap lines
set nowrap

" Code folding
set foldmethod=syntax

augroup OpenAllFoldsOnFileOpen
    autocmd!
    autocmd BufRead * normal zR
augroup END



" NERDCommenter
let g:NERDCustomDelimiters = { 'fsharp': { 'left': '//', 'right': '' } }
let g:NERDDefaultAlign = 'left'


" NERDTree config
map <C-n> :NERDTreeToggle<CR>
map <leader>n :NERDTreeFind<CR> 
let g:NERDTreeDirArrowExpandable = '›'
let g:NERDTreeDirArrowCollapsible = '⌄'
let NERDTreeMinimalUI=1

" Fzf
map <leader><leader> :Files<CR>
map <leader>b :Buffers<CR>
map <leader>ag :Rg<CR>
map <leader>gb :GBranches<CR>

let $FZF_DEFAULT_OPTS='--reverse --color=light'
let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.8 } }

nnoremap <leader>pw :Rg <C-R>=expand("<cword>")<CR><CR>
nnoremap <leader>prw :CocSearch <C-R>=expand("<cword>")<CR><CR>

" Airline config
let g:airline_section_a = airline#section#create(['mode', ' ', 'branch'])
"let g:airline_section_x = ''
"let g:airline_section_y = ''
let g:airline_theme='lucius'
let g:airline_powerline_fonts = 1

" Fugitive
"vmap <silent> g <esc>:Gdiff<cr>gv:diffget<cr><c-w><c-w>ZZ
"map <leader>gs :G<CR>

" ---- CoC related config ----

" Custom
map <leader>cr :CocRestart<CR>

" Recommended

set cmdheight=2
set updatetime=300
set shortmess+=c

let g:coc_node_path = "/Users/aguz/.config/nvm/12.13.1/bin/node"

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')


" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <C-d> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <C-d> <Plug>(coc-range-select)
xmap <silent> <C-d> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <leader>a  :<C-u>CocFzfList diagnostics<cr>
" Show commands
nnoremap <silent> <leader>c  :<C-u>CocFzfList commands<cr>
" Find symbol of current document
nnoremap <silent> <leader>o  :<C-u>CocFzfList outline<cr>
" Search workspace symbols
nnoremap <silent> <leader>s  :<C-u>CocFzfList symbols<cr>
" Resume latest coc list
nnoremap <silent> <leader>p  :<C-u>CocFzfListResume<CR>
